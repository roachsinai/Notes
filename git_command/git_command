!#基本命令

###设置开发者的个人信息###
1.配置全局用户名及email地址：
  git config --global user.name "Roach Siani"
  git config --global user.email "710347541@qq.com"

2.查看已经配置的全局信息：
  git config -l

###创建仓库###
3.初始化仓库：
  git init
  查看当前仓库状态：
  git status
  
  这样会在工作区(当前电脑的操作目录) 生成一个隐藏目录.git，这不算工作区，而是Git的仓库(版本库)；
  Git的版本库里存了许多东西，其中最重要的就时称为stage的暂存区，和Git为用户自动创建的主程序分支master，以及指向master的HEAD指针；

###添加文件###
4.将文件加入到暂存库中：
  git add Hello.java 注意，此时文件并没有真正提交到主分支上；

5.提交文件信息,提交时要添加提交的注释信息： -m
  git commint -m "New Java File - Hello.java Create"
  注意：所有修改的代码都会被GIT自动的监测到，所有的代码在使用commit之前一定要先使用add添加到暂存库，不然不会发生任何的提交；
  如果想越过add,可以在commit时添加"-a"参数，表示先add然后commit(git commit -a -m "注释");

6.git下用户每一次进行提交都会被日志记录下来

  查看针对"Hello.java"文件的日志信息：
  git log Hello.java  此操作会显示一个提交的信息(id)号、日期、提交者；

###修改仓库文件###
7.对Hello.java增加两行，删除一行，查看仓库状态：git提示文件没有保存到暂存区，并且或者选择文件暂存，或者对修改文件进行恢复，并且给出了被修改的文件；

8.参看文件前后的区别：
  git diff Hello.java
  可以发现所有增加的内容会使用“+”表示，而被删除的信息会使用“-”表示；

  然后git commit -am "Update Hello.java File . Add Two Lines"会显示添加两行，删除一行；

  查看日志信息：git log Hello.java 又增加了一个commit id;

###工作区 暂存去###
1.工作区操作
  *修改Hello.java
  *增加一个Demo.java文件
  git status 显示 *修改了Hello.java,给出两种处理方法
                  *出现一个未标记文件，询问是否加入暂存区

2.暂存区操作                  
  *使用git add . 将代码添加到暂存区

3.提交修改
  将保存在暂存区的数据进行提交，将代码提交到主分支上；
  *当把暂存区代码提交到主分区上之后，会自动清空暂存区的内容；
  git commit -m "Add Demo.java File"
  *再此查询状态 git status
  将有如下的提示：无文件要提交，干净的工作区；
  *即：暂存区已清空；

4.版本回退
  修改Demo.java和Hello.java,然后git commit -am "Change Two Files"
  查询当前修改后的日志信息 git log , q退出
  **更可以这样显示日志：git log --pretty=oneline
  *commid是由系统生成的十六进制数据，概念上与Session类似，由Git自己控制；

  **在master分支上有一个HEAD指针存在，该指针默认情况下永远指向作后一次提交的位置；
  **当使用回退之后HEAD指针出现了改变，如果回退一步，那么之前的操作不会被删除，但所有的代码会回退到指定位置的状态；
  4.1 回退一步：
  git reset --hard HESD~1

  ****那么如果说现在还想恢复到最新的状态呢？那么就必须找到回退的commit id;
  4.2找到所有的commit id：
    git reflog 
    **上面的命令给出回退到那一步，并给出了所有commint id的简写编号

    **恢复到最后一次提交：
      *通过reflog 找到最后一次提交的commit id 简写编号；
      git reset --hard f56e4c9 将会提示HEAD现在位于哪里；
      上面的编号不唯一；

      此时代码就恢复到最新的状态，也就是利用这些commit id就可以方便的进行历史穿梭；

5.提示：文件修改问题
  有了暂存区和master主分支概念之后，就需要回避一个问题：只有保存在暂存区之中的内容才可以被真正的提交，而不是针对我们的文件；

  5.1 修改Hello.java文件
  5.2 将文件的修改增加到暂存区中
      git add .
  5.3 修改Hello.java文件  注意：没有commit
      对于此时的修改不将其add到版本库中
  5.4 进行提交(提交的时候只提交暂存区内的内容)
      git commit -m "change print"
      可是这时候只是提交了第一次修改，而第二次没有提交
  5.5 查询状态
      git status 提示：有的修改尚未加入提交
      进行对比:
      git diff HEAD Hello.java 
      HEAD是指向最后一次提交的指针，现在的含义是将HEAD中的Hello.java文件和工作区中的Hello.java文件进行对比；
  总结：如果一个文件修改了多次，那么就需要执行多次的add后才可以提交，即commit只提交添加到暂存区中的修改；

6.撤销修改
  代码修改一半发现不应该修改；

  6.1 git add和git commit均没有执行
      如果工作区中的代码并没有增加到暂存区中；
      只要文件已修该，git 就可以跟踪到状态；即使你保存退出了；

      恢复到上一次提交点：
      git checkout -- Hello.java

  6.2 git add但是还未commit

      git add .
      git status 提示：你可以根据HEAD指针来恢复文件

      从暂存区撤出修改：
      git reset HEAD Hello.java 
      现在情况与6.1相同；

7.删除文件
  如果仓库中存在Demo.java文件，但是以后都用不到了，就可以删除了；但是在Git中删除文件严格来讲也属于一个修改操作；
  7.1 从硬盘上删除Demo.java文件
  7.2 查询状态
      git status 提示：提示文件被删除
      git commit -am "Delete Demo.java File"
  7.3 如果发现文件被错误删除了，就要恢复文件
      git checkout -- Demo.java 提示：git找不到Demo.java

      git log --pretty=oneline 查看所有的commit id
      git reset --hard e3ff0ae
  如果文件被删除，并commit到git中，就只能用版本控制的方式进行恢复；


!#远程仓库

3.1.生成一个RSA编码的KEY
    ssh-keygen -t rsa -C "710347541@qq.com" 提示：key文件保存的位置；然后会提示设置密码；
    GitHub中添加公钥,实现与远程仓库的连接

3.2 添加远程仓库
    3.2.1 GitHub新建一个仓库
            仓库创建后会给出两种连接方式
            · SSH链接地址：git@github.com:roachsinai/yootk.git
            · HTTPS链接地址：https://github.com/roachsiani/yootk.git
            本地仓库只有通过以上链接才能链接服务器；
    3.2.2 把GitHub与本地仓库相连
            git remote add origin https://github.com/roachsinai/yootk.git
            此时远程仓库并没有本地仓库的内容
    3.2.3 将本地仓库的内容推送到GITHUB上
            git push -u origin master
            将所有的文件进行推送，使用-u将远程master和本地master进行关联；
            使用https需要提供用户名和密码；
    3.2.4 将一个远程仓库origin的链接修改为...
            **git remote set-url origin https://github.com/roachsinai/yootk.git
    3.2.5 查看远程服务器端已经存在的仓库信息：
            git remote -v
    3.2.6 删除远程的一个名为test的仓库
            git remote rm test
    3.2.7 修改Hello.java文件、Demo.java文件:修改的为println的内容；
    3.2.8 将本地的需igai提交到服务器上：
            git commit -am "Change Two Files Print Content" ，此时只是将其提交到了本地的master分支上；而远程的master分支并没有改变；下面需要进行客户端向服务端的代码推送；
            **git push origin master； 此时就完成了本地代码与服务器代码的同步；

3.3 克隆仓库
    上面的所有内容时现有本地仓库，然后提交到远程仓库上面进行管理；但是这是错误的做法，正确的应该是应该先有远程仓库，然后根据远程仓库克隆出一个新的仓库出来；
    3.3.1 在GitHub上初始化一个远程仓库，mldnback,选中"Initialize this repository with a README",表示自动为用户仓库进行初始化，并且会自动存在一个"READEME"的文件存在；此时观察一下仓库存在的内容；
    3.3.2 在本地仓库上进行仓库的克隆操作；**需要切换新目录来执行克隆操作；而这个操作会在哪个目录下新建一个该项目文件夹，即你只需要在你想存放该仓库的地方直接克隆就行，不需要mkdir repo；
          git clone https://github.com/roachsinai/mldnback.git
          在开发中最好的方法是所有的开发者直接克隆远程仓库进行操作；

3.4 克隆其他开源项目
    · bootstrap: https://github.com/twbs/bootstrap
    · mybatis:   https://github.com/mybatis

    但是，上面下载下来的代码是不能够进行修改的，因为这个主文件只能够由用户发出修改意见(补丁)而后根据补丁邮件的内容，由开发者进行修改；如果想要小范围修改，则可以将项目克隆过来(Fork)；
    随后可以在本地仓库中利用之前的代码克隆方式将代码拷贝下来；
    3.4.1 克隆mybatis的项目
          git clone https://github.com/roachsinai/mybatis-3.git
          代码的下载速度很慢，如果不是要进行源代码的修改，这样的操作意义不大。


!#分支管理

4.1 创建与合并分支
    主分支作为代码发布、展示使用，开发一般都在自己子分支上进行开发；

    创建一个新的分支brh,会创建一个新的指针指向和master相同的提交；HEAD指针会指向(当前工作的分支)brh指针，表示当前分支在brh上；
    此时brh进行提交，则master分支不会发生改变；只有brh分支会发生改变；而master的版本号就落后于子分支了；但是不管子分支怎么开发也不会是最新的发布版本；所有的发布版本都保存在master分支上；就必须将子分支和master分支进行合并；
    **当分支合并后，实际上就相当于master分支的提交点修改为子分支的提交点，而后这个合并应该在master分支上完成，而HEAD休要修改指针，指向master分支；
    删除子分支后子分支指针都会删除，删除前需要提交后者强制删除；

    4.1.1 创建一个分支
          git branch brh
    4.1.2 分支创建之后可以通过如下命令金像查看；
          git branch; 提示当前工作区有两个分支，且现在的分支指向master分支；
    4.1.3 切换到brh分支
          git checkout brh (查看)
          然后 git branch 会显示当前分支在brh;

          删除brh;
          git branch -d brh 提示：无法删除但前所在分支，此操作需要先 git checkout master,即先切换到其他的分支；
          **创建并且切换到分支：
          git checkout -b brh
    4.1.4 现在已经成功的在brh分支上了，下面进行代码的修改；
          修改Hello.java文件
           这时候Hello.java文件的修改是属于子分支上的，并且当前也是子分支(HEAD指向brh)

    4.1.5 在brh分支上将修改进行提交：
          git commit -am "Modified Hello.java File"

          **此时更新的是子分支的内容，那么主分支呢？

          当子分支的数据提交之后实际上并不会去修改master的内容，切换到master上会发现Hello,java内容并没有修改；即两个分支上的内容是互相独立的；
    4.1.6 将master和brn两个分支都提交到服务器上(GitHub)
          *git push origin master
          *git push origin brn
    4.1.7 最终发布的版本一定是在master上，所以需要将brh分支与master分支进行合并(在主分支上)；
          *git merge brh *如果在brh分支上进行此操作，只会显示Already up-to-date；
          在msater上进行合并，此时的合并方式为"Fast-forward",表示快速合并方式；快速合并方式不会产生任何的commit id;它只是利用了合并子分支的commit id继续操作(保留并使用brh的commit id)；
    4.1.8 此时的brh分支如果没有用了就可以进行删除操作；
          git branch -d brh
    4.1.9 提交master分支
          git push origin master

          **现在在本地已经没有brh分支，远程仍然存在远程分支；
    4.1.10 删除远程分支
           **git push origin --delete brh 会提示删除了远程分支；

4.2 分支的操作管理
    对分支中git使用的一些问题进行集中式的说明；
    4.2.1 为了方便建立一个新的分支： brh
          git checkout -b brh
    4.2.2 在此分支上建立一些文件
          *这是建立在brh分支上的；
          git add Emp.java
          git commit -m "Add Emp.java File"
    4.2.3 此时并没有进行分支数据的提交，但是有人觉得这个分支的名不好，想用自己名字的简写；
          git branch -m brh brh
          现在相当于分支名称的重命名；
    4.2.4 现在将分支推送到服务器端
          git push origin brh
    4.2.5 在本地查看远程的分支：
          git branch -a 查看本地和远程所有的分支；
          git branch -r 查看远程的分支
          git branch -l 查看本地的分支(default)
    4.2.6 此时"brh"分支上已经作出了修改，但是并没有与master分支进行合并，因为现在所开发的功能开发到一半发现不再需要；要废除调所做的修改；作出删除"brh"的命令；
          提示：分支没有合并不能删除；强制删除清执行git branch -D brh
          git branch -D brh 提示:已删除分支brh；
          可是现在在服务器上会存在此分支，也需要删除掉，删除操作，除了之前使用的方法，也可以推送一个空的分支，也表示删除；
          **删除方式一：
          git push origin --delete brh;
          **推送一个空分支过去：
          git branch brh;
          git push origin brh;
          **git push origin :brh;
          由于新推送的是一个空分支，服务器认为推送的目的就是为了删除分支！

4.3 冲突自动解决
    
    分支可以实现多人的开发操作，但是可能出现一下情况：
    *现在建立了一个分支brh，并且有一位开发者在此分支上修改了Hello.java文件；(mldnback文件夹中)
    *但是由于开发者的失误，将分支切换到了master分支上，并且在master分支上也对Emp.java进行了修改;
    
    **等于现在有两个分支对同一个文件进行了修改，那么进行提交的时候就一定会出现一个冲突；因为系统不知道究竟提交那一个分支的文件；
    4.3.1 建立并切换到brh分支； git checkout -b brh
    4.3.2 在此分支上修改Hello.java文件
    4.3.3 在brh分支上提交此文件
          git commit -ma "Add static attribute"
    4.3.4 切换master分支
          git checkout master
    4.3.5 在master分支上修改Hello.java文件
    4.3.6 在master分支上进行修改的提交
          git commit -am "Add static method to File Hello.java"
          **现在在两个分支上都存在了代码的修改，而且很明显，修改的是同一个文件，那么自然进行分支的合并的时候是无法合并的；
    4.3.7 合并分支(此时存在于master分支上)
          git merge brh 提示：git 以'recursice'策略将brh分支合并到了master分支上；
          即此类冲突git可以自己帮助用户解决！

4.4 冲突手动解决
    上面的例子没有发现不能操作的冲突；下面是一个有冲突产生的例子；
    4.4.1 准备过程 
          删除brh分支 git branch -d brh
          修改Hello.java文件，(在master分支上)
          提交此修改 git commit -am "File Hello.java - simple method"
          那么等于Hello.java文件的内容已经变得很简单了；
    4.4.2 创建并切换到brh分支上： git checkout -b brh
    4.4.3 修改Hello.java文件(brh分支上)
    4.4.4 在brh分支上提交 git commit -am "File Hello.java - yootk method(simple print)"
    4.4.5 切换到master分支上 git checkout master
    4.4.6 在master分支上修改Hello.java文件
    4.4.7 提交master的修改
          git commit -am "File Hello.java - yootk method(url print)"
          **现在两个修改都是针对于主方法中的内容的改变，在master中合并数据;
    4.4.8 合并分支
          git merge brh 提示：出现了冲突，自动合并失败；
    4.4.9 ****查看冲突
          git status 提示：对Hello.java文件，双方修改，即有两个分支对其进行了修改；
    4.4.10 查看Hello.java文件 vim Hello.java 发现git对冲突的部分进行了标记；
           **那么就必须认为手工修改发生冲突的文件；
    4.4.11 手工修改Hello.java文件
           如果保留所有的修改，将三个区分行全部删除后提交
    4.4.12 手动解决冲突后，继续进行提交
           git commit -am "File Hello.java - manual conflict"
           现在冲突问题已经解决了
           ******其实，当到第11步的时候，冲突已经解决，git已经将冲突的内容显示在Hello.java文件中，此时已经可以合并提交；但是冲突在文件中显示了出来，需要通过12步手动解决！！然后提交，这样冲突才算真正的解决了；
    4.4.13 向服务器端提交信息 git push origin master
           ****在实际的开发之中，一定会存在许多的分支合并的情况，怎么知道分支合并的历史呢？
    4.4.14 查看合并的情况
           git log --graph --pretty=oneline
           --graph 以绘图方式实现
    4.4.15 删除掉brh分支 git branch -d brh
    
4.5 分支的管理策略
    ****在之前进行的分支合并的时候使用的全部都是"Fast forward"方式进行的；此种方式只是改变了master指针，可是在分支的时候也可以不使用这种快合并；即增加一个"-no-ff"参数，就表示在合并后会再生成一个新的commit id，从而保证合并数据的完整性；
    4.5.1 创建一个新的分支 git checkout -b brh
    4.5.2 建立一个新的文件Emp.java文件
    4.5.3 提交修改 git add .
          git commit -m "Add Emp.java File"
    4.5.4 切换回master分支 git checkout master
    4.5.5 使用非快速合并的方式进行代码合并；
          git merge --no-ff -m "No ff commit brh" brh ********
          "--no-ff"方式会带有一个新的提交，所以需要为提交设置一个提交的过程;
    4.5.6 查看一下提交后的日志信息
          git log --graph --pretty=oneline --abbrev-commit 
    ****  ****经过测试发现fast forward与--no-ff的区别：如果是fast forword且合并时没有冲突，就会直接将master分支指向brh分支(如果有冲突则不能一ff方式进行合并)，即使用的是brh分支最新的commit id；以--no-ff方式进行合并，则在master分支新建一个commit id，将两个分支的内容合并到这里；

4.6 分支暂存
    如果你现在正在一个分支上进行开发，但是有一个新的任务需要在半个小时内完成，怎么办？
    难道那开发一半的分支要提交么？不可能的，因为对于版本控制的基本道德方式，你不能把有问题的代码提交上去，所提交的代码一定都是正确的代码；
    为了解决这个问题，在Git中提供了一个分支暂存的机制，可以将开发一半的分支进行保存，而后在适当的时候进行代码的恢复；
    下面创建一个基本的开发场景：
    4.6.1 创建并切换到一个新的分支 git checkout -b brh
    4.6.2 下面在分支上编写(修改)Emp.java类的文件
    4.6.3 将此文件保存在我们的暂存区中 git add .
          这个时候由于代码还没有开发完成，所以不能够进行代码的提交；但是老板给了一个新的任务，不得不去停止当前开发的任务，所以就需要将当前的开发任务进行"暂存",等有时间了继续进行恢复开发；
    4.6.4 将工作暂存
          git stash 提示：brh分支的工作目录和Git索引(index state即暂存区)已经保存WIP：Working in process；
          ****查看当前工作区的内容: git status 提示：当前工作区，没有任何修改，clean；
    4.6.5 切换到master分支 git checkout master
          现在创建一个新的分支，用于老板的需要--dev(也有可能是一个bug调试)；
    4.6.6 创建并切换分支dev git checkout -b dev
    4.6.7 在新的分支中修改Hello.java文件
    4.6.8 提交修改的操作: git commit -am "Dev change file Hello.java"
          假设到此老板的需求已经完成了，但是代码还是处于dev分支中，那么现在切换回到master分支并且进行合并；
    4.6.9 切换回master分支
    4.6.10 合并dev分支，使用--no-ff
           git merge --no-ff -m "Merge dev branch" dev
    4.6.11 现在突发的问题已经解决，dev分支存在意义不大，可以删除dev分支： git branch -d dev
    4.6.12 现在需要回归已有的工作状态，但是有可能会存在有许多的暂存的状态，可以使用如下命令列出；
           git stash list 提示：存在一个暂存的区域：stash@{0}；
    4.6.13 从暂存区中进行恢复
           暂存区恢复之后所暂存所暂停的操作将没有存在的意义，但是也有人会认为它有意义，所以对于恢复有两种形式：
            **形式一：先恢复，然后手工删除暂存
                      git stash apply
                      git stash drop
            **形式二：恢复的同时也将stash的内容删除
                      git stash pop 提示：丢弃了暂存refs/stash@{0};
           那么下面的任务就可以像之前那样进行代码的提交，而后删除brh分支；
           将brh新建的Emp.java添加到master的暂存区并提交，然后删除brh分支;
           git commit -am "Change file Emp.java" (在master分支上)
           git branch -d brh
           使用暂存的策略可以很方便的及解决暂停修改的操作，非常方便；

4.7 补丁问题：patch
    补丁是针对于局部的修改，如果按照最早克隆的方式将代码整体克隆下来实际上所花费的是非常庞大的，但是可能只修改很小的一部分代码，所以在这种情况下就希望可以将一些代码的补丁信息发送给开发者；而发给开发者后他需要知道那些代码被修改了，这样的话可以使用一个极低的开销实现代码的修改操作，而Git提供了两种补丁方案：
    ××使用git diff 生成标准的patch；
    ××使用git format-patch生成Git专用的patch；

    4.7.1 利用git diff生成标准的patch
    4.7.1.1      补丁一定是针对语文件的修改进行的，以Emp.java为例
          当前分支为master分支
    4.7.1.2 建立并切换一个新的分支cbth
          git checkout -b cbrh
    4.7.1.3 修改Emp.java文件
    4.7.1.4 查看前后代码的不同
          git diff Emp.java
          此时可以发现Emp.java文件修改前后对比情况;
    4.7.1.5 在cbrh上进行代码的提交
          git commit -am "Add attribute in Emp.java"
          此时并没有和主分支进行提交，但是代码已经改变了，需要的是将代码的变化提交给开发者；
    4.7.1.6 生成补丁文件
          git diff master > mypat
    4.7.1.7 切换到master分支
          git checkout master
          此时自动在目录中生成了一个mypat补丁文件信息，这个文件是可以由git读懂的信息文件；现在模拟另外一个开发者，假设他是专门进行补丁合并的开发者；
    4.7.1.8 创建并切换一个新的分支git checkout -b patchbrh
    4.7.1.9 应用补丁信息 
          git apply mypat
          此时补丁可以成功的使用了
    4.7.1.10 提交补丁的操作
           git commit -am “Patch apply”
    4.7.1.11 切换会master分支后进行分支合并；
           git checkout master
           git merge --no-ff -m "Merge patch" patchbrh
           这样如果只是将补丁数据的文件发给开发者，那么就没有必要进行大量的代码的传输，并且在创建补丁的时候也可以这对多个文件进行补丁的创建；
    
    4.7.2 利用git format-patch生成git的专用补丁
          利用分支修改Emp.java文件
          准备工作删除上一步的分支：git branch -D cbrh
                                    git branch -D patchbrh
    4.7.2.1 创建并切换到cbrh分支 git checkout -b cbrh
    4.7.2.2 修改Emp.java文件
    4.7.2.3 将代码进行提交 git commit -am "Add toString method to file Emp.java"
    4.7.2.4 下面需要与原始代码做一个比较，而且比较后会自动生成补丁文件；
            git format-patch -M master
            现在表示要与master分支进行比较(而-M参数就是指定分支)；
            此时已经生成了一个补丁文件，因为只修改了一次的内容；这个补丁文件严格来讲就是一个email数据，需要将此数据发送个开发者，而后开发者可以进行补丁的应用；
    4.7.2.5 切换到patchbrh分支上；
            git checkout master
            git checkout -b patchbrh
    4.7.2.6 应用补丁信息看，利用"git am"完成；
            git am 0001-Add-toString-method-to-file-Emp.java.patch
            提示正在应用补丁，想在是将发送过来的带email格式的补丁进行应用；
    4.7.2.7 提交应用的更新
            git commit -am "Method patch apply"
            此时就可以应用补丁进行代码的更正；
        关于两种补丁方式的说明：
        ××使用git diff生成的补丁兼容性是比较好的，如果你是在不是Git管理的仓库上，此类方式生成的补丁是非常容易接受的；
        ××但是如果你是向公共的开发社区进行代码的更正，那么建议使用git format-patch,这样不仅标准，而且可以将更正人的信息进行公布；

4.8 多人写作开发
    分支的处理实际上是为了更好的多人开发做出的准备，那么下面就将利用两个命令行方式(模拟其他的开发者)进行项目代码的编写，首先说明一下：
    一般而言，master分支是项目的核心分支，只要进行代码的克隆，那么此分支一定会保存下来;
    开发者往往会建立一系列的分支，譬如，我个人建立了一个brh分支进行代码的编写；
    如果要进行调试可以建立一个bug分支;
    如果要增加某些新的功能可以建立feature分支；

    下面首先针对代码进行一些准备：
    4.8.1 创建并切换到一个新的分支：brh git checkout -b brh
    4.8.2 在新的分支上建立新的文件Dept.java
    4.8.3 将代码进行提交
          git add .
          git commit -am "Add Dept.java file"
    4.8.4 将两个分支提交到服务器上；git push origin master
          git push master master
          git push master brh
    4.8.5 为了模拟第二个开发者，建立一个新的命令行窗口，并将代码克隆下来（../yooclone/yootk）
    4.8.6 去二号开发者(../yooclone/yootk)下查看仓库信息 git branch -a
          发现只是将master分支复制下来了，但是brh分支并没有存在
    4.8.7 [二号]建立并切换到brh分支上 git checkout -b brh
    4.8.8 [二号]将远程服务器上的brh分支的内容拷贝到本地的brh上
          ×× git merge origin/brh
    4.8.9 [二号]开发者增加了Admin.java文件
    4.8.10 [二号]将新的代码进行提交
           git add .
           git commit -am "Add file Admin.java“
    4.8.11 [二号]现在本地的brh分支代码发生了变化，那么应该将此变化提交到远程的brh分支上；
           git push origin brh;
           现在代码已经发送到服务器上了，并且在brh上增加了Adimn.java文件；
    4.8.12 [一号]原始的开发目录还只是上一次提交的内容，那么需要取得最新的数据；
           有两种方式：
           ×× git fetch ：此操作是去的最新的分支数据，但是不会发生merge操作；
           ×× git pull ： 此操作取出最新的分支数据，并且同时发生merge合并操作；

           采用git pull 提示：当前的brh分支和服务器上的分支没有关系，如果想读取代码，必须让两个分支产生关系；
           git branch --set-upstream=origin/brh
           再次git pull
    4.8.13 [二号]修改Admin.java文件
    4.8.14 [二号]将修改的代码进行提交
           git commit -am "Update file Adimn.java"
    4.8.15 [二号]向服务器端提交代码的修改
           git push origin brh
    4.8.16 [一号]修改Admin.java文件
    4.8.17 [一号]将修改的代码进行提交
           git commit -am "Another update to file Admin.java"
           这个时候很明显，两个用户修改了同一个文件；
    4.8.19 git pull
           因为两个开发者修改了同一个文件，所以产生了冲突，同时一号开发者的Admin.java文件内容发生变化显示了冲突后的明细；
    4.8.20 [一号]手工解决冲突，再次提交
           再次推送
           git commit -m "Solve the confliction of file Admin.java"
           git push origin brh

           现在已经由本地的冲突，扩充到了远程的冲突，并可以解决；

